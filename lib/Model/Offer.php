<?php
/**
 * Offer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WigandtTech\Refurbed
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merchant API
 *
 * The refurbed merchant API allows to access and manage markets, currencies, instances, shipping profiles, offers, market offers, orders and order items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@refurbed.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WigandtTech\Refurbed\Model;

use \ArrayAccess;
use \WigandtTech\Refurbed\ObjectSerializer;

/**
 * Offer Class Doc Comment
 *
 * @category Class
 * @description A merchant&#39;s offer.
 * @package  WigandtTech\Refurbed
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Offer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'isCurrent' => 'bool',
        'createdAt' => '\DateTime',
        'instanceId' => 'string',
        'instanceName' => 'string',
        'state' => '\WigandtTech\Refurbed\Model\OfferState',
        'sku' => 'string',
        'grading' => '\WigandtTech\Refurbed\Model\OfferGrading',
        'warranty' => '\WigandtTech\Refurbed\Model\OfferWarranty',
        'stock' => 'int',
        'shippingProfileId' => 'string',
        'shippingProfileName' => 'string',
        'secondaryShippingProfileId' => 'string',
        'secondaryShippingProfileName' => 'string',
        'taxation' => '\WigandtTech\Refurbed\Model\OfferTaxation',
        'realTaxation' => '\WigandtTech\Refurbed\Model\OfferTaxation',
        'referenceCurrencyCode' => '\WigandtTech\Refurbed\Model\CurrencyCode',
        'referencePrice' => 'string',
        'referenceMinPrice' => 'string',
        'setMarketPrices' => '\WigandtTech\Refurbed\Model\OfferMarketPrice[]',
        'calculatedMarketPrices' => '\WigandtTech\Refurbed\Model\OfferMarketPrice[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'version' => 'int64',
        'isCurrent' => null,
        'createdAt' => 'date-time',
        'instanceId' => 'int64',
        'instanceName' => null,
        'state' => null,
        'sku' => null,
        'grading' => null,
        'warranty' => null,
        'stock' => 'int64',
        'shippingProfileId' => 'int64',
        'shippingProfileName' => null,
        'secondaryShippingProfileId' => 'int64',
        'secondaryShippingProfileName' => null,
        'taxation' => null,
        'realTaxation' => null,
        'referenceCurrencyCode' => null,
        'referencePrice' => null,
        'referenceMinPrice' => null,
        'setMarketPrices' => null,
        'calculatedMarketPrices' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'isCurrent' => 'is_current',
        'createdAt' => 'created_at',
        'instanceId' => 'instance_id',
        'instanceName' => 'instance_name',
        'state' => 'state',
        'sku' => 'sku',
        'grading' => 'grading',
        'warranty' => 'warranty',
        'stock' => 'stock',
        'shippingProfileId' => 'shipping_profile_id',
        'shippingProfileName' => 'shipping_profile_name',
        'secondaryShippingProfileId' => 'secondary_shipping_profile_id',
        'secondaryShippingProfileName' => 'secondary_shipping_profile_name',
        'taxation' => 'taxation',
        'realTaxation' => 'real_taxation',
        'referenceCurrencyCode' => 'reference_currency_code',
        'referencePrice' => 'reference_price',
        'referenceMinPrice' => 'reference_min_price',
        'setMarketPrices' => 'set_market_prices',
        'calculatedMarketPrices' => 'calculated_market_prices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'isCurrent' => 'setIsCurrent',
        'createdAt' => 'setCreatedAt',
        'instanceId' => 'setInstanceId',
        'instanceName' => 'setInstanceName',
        'state' => 'setState',
        'sku' => 'setSku',
        'grading' => 'setGrading',
        'warranty' => 'setWarranty',
        'stock' => 'setStock',
        'shippingProfileId' => 'setShippingProfileId',
        'shippingProfileName' => 'setShippingProfileName',
        'secondaryShippingProfileId' => 'setSecondaryShippingProfileId',
        'secondaryShippingProfileName' => 'setSecondaryShippingProfileName',
        'taxation' => 'setTaxation',
        'realTaxation' => 'setRealTaxation',
        'referenceCurrencyCode' => 'setReferenceCurrencyCode',
        'referencePrice' => 'setReferencePrice',
        'referenceMinPrice' => 'setReferenceMinPrice',
        'setMarketPrices' => 'setSetMarketPrices',
        'calculatedMarketPrices' => 'setCalculatedMarketPrices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'isCurrent' => 'getIsCurrent',
        'createdAt' => 'getCreatedAt',
        'instanceId' => 'getInstanceId',
        'instanceName' => 'getInstanceName',
        'state' => 'getState',
        'sku' => 'getSku',
        'grading' => 'getGrading',
        'warranty' => 'getWarranty',
        'stock' => 'getStock',
        'shippingProfileId' => 'getShippingProfileId',
        'shippingProfileName' => 'getShippingProfileName',
        'secondaryShippingProfileId' => 'getSecondaryShippingProfileId',
        'secondaryShippingProfileName' => 'getSecondaryShippingProfileName',
        'taxation' => 'getTaxation',
        'realTaxation' => 'getRealTaxation',
        'referenceCurrencyCode' => 'getReferenceCurrencyCode',
        'referencePrice' => 'getReferencePrice',
        'referenceMinPrice' => 'getReferenceMinPrice',
        'setMarketPrices' => 'getSetMarketPrices',
        'calculatedMarketPrices' => 'getCalculatedMarketPrices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['isCurrent'] = $data['isCurrent'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['instanceId'] = $data['instanceId'] ?? null;
        $this->container['instanceName'] = $data['instanceName'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['sku'] = $data['sku'] ?? null;
        $this->container['grading'] = $data['grading'] ?? null;
        $this->container['warranty'] = $data['warranty'] ?? null;
        $this->container['stock'] = $data['stock'] ?? null;
        $this->container['shippingProfileId'] = $data['shippingProfileId'] ?? null;
        $this->container['shippingProfileName'] = $data['shippingProfileName'] ?? null;
        $this->container['secondaryShippingProfileId'] = $data['secondaryShippingProfileId'] ?? null;
        $this->container['secondaryShippingProfileName'] = $data['secondaryShippingProfileName'] ?? null;
        $this->container['taxation'] = $data['taxation'] ?? null;
        $this->container['realTaxation'] = $data['realTaxation'] ?? null;
        $this->container['referenceCurrencyCode'] = $data['referenceCurrencyCode'] ?? null;
        $this->container['referencePrice'] = $data['referencePrice'] ?? null;
        $this->container['referenceMinPrice'] = $data['referenceMinPrice'] ?? null;
        $this->container['setMarketPrices'] = $data['setMarketPrices'] ?? null;
        $this->container['calculatedMarketPrices'] = $data['calculatedMarketPrices'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Primary key.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Version of this offer.
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets isCurrent
     *
     * @return bool|null
     */
    public function getIsCurrent()
    {
        return $this->container['isCurrent'];
    }

    /**
     * Sets isCurrent
     *
     * @param bool|null $isCurrent Indicates whether this is the currently available version.
     *
     * @return self
     */
    public function setIsCurrent($isCurrent)
    {
        $this->container['isCurrent'] = $isCurrent;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt When the offer was initially created.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets instanceId
     *
     * @return string|null
     */
    public function getInstanceId()
    {
        return $this->container['instanceId'];
    }

    /**
     * Sets instanceId
     *
     * @param string|null $instanceId The refurbed instance id (\"product variant\") this offer is for.
     *
     * @return self
     */
    public function setInstanceId($instanceId)
    {
        $this->container['instanceId'] = $instanceId;

        return $this;
    }

    /**
     * Gets instanceName
     *
     * @return string|null
     */
    public function getInstanceName()
    {
        return $this->container['instanceName'];
    }

    /**
     * Sets instanceName
     *
     * @param string|null $instanceName Human-readable name of the instance this offer is for.
     *
     * @return self
     */
    public function setInstanceName($instanceName)
    {
        $this->container['instanceName'] = $instanceName;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \WigandtTech\Refurbed\Model\OfferState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \WigandtTech\Refurbed\Model\OfferState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku The merchant's SKU.  Max. length is 256 unicode characters. SKUs cannot have leading or trailing whitespace characters.  Can be empty string for old offers that did not require SKU to be set.
     *
     * @return self
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets grading
     *
     * @return \WigandtTech\Refurbed\Model\OfferGrading|null
     */
    public function getGrading()
    {
        return $this->container['grading'];
    }

    /**
     * Sets grading
     *
     * @param \WigandtTech\Refurbed\Model\OfferGrading|null $grading grading
     *
     * @return self
     */
    public function setGrading($grading)
    {
        $this->container['grading'] = $grading;

        return $this;
    }

    /**
     * Gets warranty
     *
     * @return \WigandtTech\Refurbed\Model\OfferWarranty|null
     */
    public function getWarranty()
    {
        return $this->container['warranty'];
    }

    /**
     * Sets warranty
     *
     * @param \WigandtTech\Refurbed\Model\OfferWarranty|null $warranty warranty
     *
     * @return self
     */
    public function setWarranty($warranty)
    {
        $this->container['warranty'] = $warranty;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return int|null
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param int|null $stock The item's stock.
     *
     * @return self
     */
    public function setStock($stock)
    {
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets shippingProfileId
     *
     * @return string|null
     */
    public function getShippingProfileId()
    {
        return $this->container['shippingProfileId'];
    }

    /**
     * Sets shippingProfileId
     *
     * @param string|null $shippingProfileId The shipping profile connected to this offer. This determines in what markets the offer is sold and what the shipping costs are.
     *
     * @return self
     */
    public function setShippingProfileId($shippingProfileId)
    {
        $this->container['shippingProfileId'] = $shippingProfileId;

        return $this;
    }

    /**
     * Gets shippingProfileName
     *
     * @return string|null
     */
    public function getShippingProfileName()
    {
        return $this->container['shippingProfileName'];
    }

    /**
     * Sets shippingProfileName
     *
     * @param string|null $shippingProfileName Name of shipping profile.
     *
     * @return self
     */
    public function setShippingProfileName($shippingProfileName)
    {
        $this->container['shippingProfileName'] = $shippingProfileName;

        return $this;
    }

    /**
     * Gets secondaryShippingProfileId
     *
     * @return string|null
     */
    public function getSecondaryShippingProfileId()
    {
        return $this->container['secondaryShippingProfileId'];
    }

    /**
     * Sets secondaryShippingProfileId
     *
     * @param string|null $secondaryShippingProfileId An optional secondary shipping profile id. Can be used to offer express shipping next to standard shipping. Has to be different from the primary shipping profile.
     *
     * @return self
     */
    public function setSecondaryShippingProfileId($secondaryShippingProfileId)
    {
        $this->container['secondaryShippingProfileId'] = $secondaryShippingProfileId;

        return $this;
    }

    /**
     * Gets secondaryShippingProfileName
     *
     * @return string|null
     */
    public function getSecondaryShippingProfileName()
    {
        return $this->container['secondaryShippingProfileName'];
    }

    /**
     * Sets secondaryShippingProfileName
     *
     * @param string|null $secondaryShippingProfileName Name of secondary shipping profile. Only returned if secondary shipping profile is set.
     *
     * @return self
     */
    public function setSecondaryShippingProfileName($secondaryShippingProfileName)
    {
        $this->container['secondaryShippingProfileName'] = $secondaryShippingProfileName;

        return $this;
    }

    /**
     * Gets taxation
     *
     * @return \WigandtTech\Refurbed\Model\OfferTaxation|null
     */
    public function getTaxation()
    {
        return $this->container['taxation'];
    }

    /**
     * Sets taxation
     *
     * @param \WigandtTech\Refurbed\Model\OfferTaxation|null $taxation taxation
     *
     * @return self
     */
    public function setTaxation($taxation)
    {
        $this->container['taxation'] = $taxation;

        return $this;
    }

    /**
     * Gets realTaxation
     *
     * @return \WigandtTech\Refurbed\Model\OfferTaxation|null
     */
    public function getRealTaxation()
    {
        return $this->container['realTaxation'];
    }

    /**
     * Sets realTaxation
     *
     * @param \WigandtTech\Refurbed\Model\OfferTaxation|null $realTaxation realTaxation
     *
     * @return self
     */
    public function setRealTaxation($realTaxation)
    {
        $this->container['realTaxation'] = $realTaxation;

        return $this;
    }

    /**
     * Gets referenceCurrencyCode
     *
     * @return \WigandtTech\Refurbed\Model\CurrencyCode|null
     */
    public function getReferenceCurrencyCode()
    {
        return $this->container['referenceCurrencyCode'];
    }

    /**
     * Sets referenceCurrencyCode
     *
     * @param \WigandtTech\Refurbed\Model\CurrencyCode|null $referenceCurrencyCode referenceCurrencyCode
     *
     * @return self
     */
    public function setReferenceCurrencyCode($referenceCurrencyCode)
    {
        $this->container['referenceCurrencyCode'] = $referenceCurrencyCode;

        return $this;
    }

    /**
     * Gets referencePrice
     *
     * @return string|null
     */
    public function getReferencePrice()
    {
        return $this->container['referencePrice'];
    }

    /**
     * Sets referencePrice
     *
     * @param string|null $referencePrice Reference gross price of this offer. The reference price is used to calculate prices of calculated offer market prices (the ones that haven't been defined manually).
     *
     * @return self
     */
    public function setReferencePrice($referencePrice)
    {
        $this->container['referencePrice'] = $referencePrice;

        return $this;
    }

    /**
     * Gets referenceMinPrice
     *
     * @return string|null
     */
    public function getReferenceMinPrice()
    {
        return $this->container['referenceMinPrice'];
    }

    /**
     * Sets referenceMinPrice
     *
     * @param string|null $referenceMinPrice Optional reference minimum price in market currency for automatic repricing. The reference minimum price is used to calculate minimum prices of calculated offer market prices (the ones that haven't been defined manually).
     *
     * @return self
     */
    public function setReferenceMinPrice($referenceMinPrice)
    {
        $this->container['referenceMinPrice'] = $referenceMinPrice;

        return $this;
    }

    /**
     * Gets setMarketPrices
     *
     * @return \WigandtTech\Refurbed\Model\OfferMarketPrice[]|null
     */
    public function getSetMarketPrices()
    {
        return $this->container['setMarketPrices'];
    }

    /**
     * Sets setMarketPrices
     *
     * @param \WigandtTech\Refurbed\Model\OfferMarketPrice[]|null $setMarketPrices Configured market prices. Unique by market code.
     *
     * @return self
     */
    public function setSetMarketPrices($setMarketPrices)
    {
        $this->container['setMarketPrices'] = $setMarketPrices;

        return $this;
    }

    /**
     * Gets calculatedMarketPrices
     *
     * @return \WigandtTech\Refurbed\Model\OfferMarketPrice[]|null
     */
    public function getCalculatedMarketPrices()
    {
        return $this->container['calculatedMarketPrices'];
    }

    /**
     * Sets calculatedMarketPrices
     *
     * @param \WigandtTech\Refurbed\Model\OfferMarketPrice[]|null $calculatedMarketPrices Calculated market prices for all markets on which prices have not been defined manually. Unique by market code.
     *
     * @return self
     */
    public function setCalculatedMarketPrices($calculatedMarketPrices)
    {
        $this->container['calculatedMarketPrices'] = $calculatedMarketPrices;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


