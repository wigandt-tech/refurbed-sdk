<?php
/**
 * ShippingProfile
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WigandtTech\Refurbed
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merchant API
 *
 * The refurbed merchant API allows to access and manage markets, currencies, instances, shipping profiles, offers, market offers, orders and order items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@refurbed.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WigandtTech\Refurbed\Model;

use \ArrayAccess;
use \WigandtTech\Refurbed\ObjectSerializer;

/**
 * ShippingProfile Class Doc Comment
 *
 * @category Class
 * @description A shipping profile defines from where a parcel will be shipped, and in what markets it will be made available and under what conditions.
 * @package  WigandtTech\Refurbed
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ShippingProfile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShippingProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'isCurrent' => 'bool',
        'createdAt' => '\DateTime',
        'name' => 'string',
        'sourceCountryMarketCode' => 'string',
        'sourceCountryMarketName' => 'string',
        'isDeletable' => 'bool',
        'numOffersAssigned' => 'int',
        'destinations' => '\WigandtTech\Refurbed\Model\Destination[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'version' => 'int64',
        'isCurrent' => null,
        'createdAt' => 'date-time',
        'name' => null,
        'sourceCountryMarketCode' => null,
        'sourceCountryMarketName' => null,
        'isDeletable' => null,
        'numOffersAssigned' => 'int64',
        'destinations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'isCurrent' => 'is_current',
        'createdAt' => 'created_at',
        'name' => 'name',
        'sourceCountryMarketCode' => 'source_country_market_code',
        'sourceCountryMarketName' => 'source_country_market_name',
        'isDeletable' => 'is_deletable',
        'numOffersAssigned' => 'num_offers_assigned',
        'destinations' => 'destinations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'isCurrent' => 'setIsCurrent',
        'createdAt' => 'setCreatedAt',
        'name' => 'setName',
        'sourceCountryMarketCode' => 'setSourceCountryMarketCode',
        'sourceCountryMarketName' => 'setSourceCountryMarketName',
        'isDeletable' => 'setIsDeletable',
        'numOffersAssigned' => 'setNumOffersAssigned',
        'destinations' => 'setDestinations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'isCurrent' => 'getIsCurrent',
        'createdAt' => 'getCreatedAt',
        'name' => 'getName',
        'sourceCountryMarketCode' => 'getSourceCountryMarketCode',
        'sourceCountryMarketName' => 'getSourceCountryMarketName',
        'isDeletable' => 'getIsDeletable',
        'numOffersAssigned' => 'getNumOffersAssigned',
        'destinations' => 'getDestinations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['isCurrent'] = $data['isCurrent'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['sourceCountryMarketCode'] = $data['sourceCountryMarketCode'] ?? null;
        $this->container['sourceCountryMarketName'] = $data['sourceCountryMarketName'] ?? null;
        $this->container['isDeletable'] = $data['isDeletable'] ?? null;
        $this->container['numOffersAssigned'] = $data['numOffersAssigned'] ?? null;
        $this->container['destinations'] = $data['destinations'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Primary key.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Version of the shipping profile.
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets isCurrent
     *
     * @return bool|null
     */
    public function getIsCurrent()
    {
        return $this->container['isCurrent'];
    }

    /**
     * Sets isCurrent
     *
     * @param bool|null $isCurrent Indicates whether this is the currently available (latest and non-deleted). version.
     *
     * @return self
     */
    public function setIsCurrent($isCurrent)
    {
        $this->container['isCurrent'] = $isCurrent;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt When the shipping profile was created.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Shipping profile name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sourceCountryMarketCode
     *
     * @return string|null
     */
    public function getSourceCountryMarketCode()
    {
        return $this->container['sourceCountryMarketCode'];
    }

    /**
     * Sets sourceCountryMarketCode
     *
     * @param string|null $sourceCountryMarketCode Code if the country market the parcel is being shipped from.
     *
     * @return self
     */
    public function setSourceCountryMarketCode($sourceCountryMarketCode)
    {
        $this->container['sourceCountryMarketCode'] = $sourceCountryMarketCode;

        return $this;
    }

    /**
     * Gets sourceCountryMarketName
     *
     * @return string|null
     */
    public function getSourceCountryMarketName()
    {
        return $this->container['sourceCountryMarketName'];
    }

    /**
     * Sets sourceCountryMarketName
     *
     * @param string|null $sourceCountryMarketName Name of the country market the parcel is being shipped from.
     *
     * @return self
     */
    public function setSourceCountryMarketName($sourceCountryMarketName)
    {
        $this->container['sourceCountryMarketName'] = $sourceCountryMarketName;

        return $this;
    }

    /**
     * Gets isDeletable
     *
     * @return bool|null
     */
    public function getIsDeletable()
    {
        return $this->container['isDeletable'];
    }

    /**
     * Sets isDeletable
     *
     * @param bool|null $isDeletable Indicates whether the shipping profile can be deleted. Will always be false on historic versions.
     *
     * @return self
     */
    public function setIsDeletable($isDeletable)
    {
        $this->container['isDeletable'] = $isDeletable;

        return $this;
    }

    /**
     * Gets numOffersAssigned
     *
     * @return int|null
     */
    public function getNumOffersAssigned()
    {
        return $this->container['numOffersAssigned'];
    }

    /**
     * Sets numOffersAssigned
     *
     * @param int|null $numOffersAssigned Number of offers this shipping profile is assigned to. Has to be 0 for the shipping profile to be deletable. Set on current version only.
     *
     * @return self
     */
    public function setNumOffersAssigned($numOffersAssigned)
    {
        $this->container['numOffersAssigned'] = $numOffersAssigned;

        return $this;
    }

    /**
     * Gets destinations
     *
     * @return \WigandtTech\Refurbed\Model\Destination[]|null
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param \WigandtTech\Refurbed\Model\Destination[]|null $destinations Destinations by market code.
     *
     * @return self
     */
    public function setDestinations($destinations)
    {
        $this->container['destinations'] = $destinations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


