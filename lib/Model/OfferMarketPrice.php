<?php
/**
 * OfferMarketPrice
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  WigandtTech\Refurbed
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merchant API
 *
 * The refurbed merchant API allows to access and manage markets, currencies, instances, shipping profiles, offers, market offers, orders and order items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@refurbed.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WigandtTech\Refurbed\Model;

use \ArrayAccess;
use \WigandtTech\Refurbed\ObjectSerializer;

/**
 * OfferMarketPrice Class Doc Comment
 *
 * @category Class
 * @description An offer price defines the price configuration of an offer for a single market.
 * @package  WigandtTech\Refurbed
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OfferMarketPrice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OfferMarketPrice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'offerId' => 'string',
        'marketCode' => 'string',
        'marketName' => 'string',
        'isSiteMarket' => 'bool',
        'isCalculated' => 'bool',
        'currencyCode' => '\WigandtTech\Refurbed\Model\CurrencyCode',
        'price' => 'string',
        'minPrice' => 'string',
        'siteMarketCurrencyCode' => '\WigandtTech\Refurbed\Model\CurrencyCode',
        'siteMarketPrice' => 'string',
        'siteMarketMinPrice' => 'string',
        'visibility' => '\WigandtTech\Refurbed\Model\OfferVisibility',
        'instanceBuyboxState' => '\WigandtTech\Refurbed\Model\OfferBuyboxState',
        'instanceBuyboxInfo' => '\WigandtTech\Refurbed\Model\BuyboxInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'offerId' => 'int64',
        'marketCode' => null,
        'marketName' => null,
        'isSiteMarket' => null,
        'isCalculated' => null,
        'currencyCode' => null,
        'price' => null,
        'minPrice' => null,
        'siteMarketCurrencyCode' => null,
        'siteMarketPrice' => null,
        'siteMarketMinPrice' => null,
        'visibility' => null,
        'instanceBuyboxState' => null,
        'instanceBuyboxInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offerId' => 'offer_id',
        'marketCode' => 'market_code',
        'marketName' => 'market_name',
        'isSiteMarket' => 'is_site_market',
        'isCalculated' => 'is_calculated',
        'currencyCode' => 'currency_code',
        'price' => 'price',
        'minPrice' => 'min_price',
        'siteMarketCurrencyCode' => 'site_market_currency_code',
        'siteMarketPrice' => 'site_market_price',
        'siteMarketMinPrice' => 'site_market_min_price',
        'visibility' => 'visibility',
        'instanceBuyboxState' => 'instance_buybox_state',
        'instanceBuyboxInfo' => 'instance_buybox_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offerId' => 'setOfferId',
        'marketCode' => 'setMarketCode',
        'marketName' => 'setMarketName',
        'isSiteMarket' => 'setIsSiteMarket',
        'isCalculated' => 'setIsCalculated',
        'currencyCode' => 'setCurrencyCode',
        'price' => 'setPrice',
        'minPrice' => 'setMinPrice',
        'siteMarketCurrencyCode' => 'setSiteMarketCurrencyCode',
        'siteMarketPrice' => 'setSiteMarketPrice',
        'siteMarketMinPrice' => 'setSiteMarketMinPrice',
        'visibility' => 'setVisibility',
        'instanceBuyboxState' => 'setInstanceBuyboxState',
        'instanceBuyboxInfo' => 'setInstanceBuyboxInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offerId' => 'getOfferId',
        'marketCode' => 'getMarketCode',
        'marketName' => 'getMarketName',
        'isSiteMarket' => 'getIsSiteMarket',
        'isCalculated' => 'getIsCalculated',
        'currencyCode' => 'getCurrencyCode',
        'price' => 'getPrice',
        'minPrice' => 'getMinPrice',
        'siteMarketCurrencyCode' => 'getSiteMarketCurrencyCode',
        'siteMarketPrice' => 'getSiteMarketPrice',
        'siteMarketMinPrice' => 'getSiteMarketMinPrice',
        'visibility' => 'getVisibility',
        'instanceBuyboxState' => 'getInstanceBuyboxState',
        'instanceBuyboxInfo' => 'getInstanceBuyboxInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offerId'] = $data['offerId'] ?? null;
        $this->container['marketCode'] = $data['marketCode'] ?? null;
        $this->container['marketName'] = $data['marketName'] ?? null;
        $this->container['isSiteMarket'] = $data['isSiteMarket'] ?? null;
        $this->container['isCalculated'] = $data['isCalculated'] ?? null;
        $this->container['currencyCode'] = $data['currencyCode'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['minPrice'] = $data['minPrice'] ?? null;
        $this->container['siteMarketCurrencyCode'] = $data['siteMarketCurrencyCode'] ?? null;
        $this->container['siteMarketPrice'] = $data['siteMarketPrice'] ?? null;
        $this->container['siteMarketMinPrice'] = $data['siteMarketMinPrice'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['instanceBuyboxState'] = $data['instanceBuyboxState'] ?? null;
        $this->container['instanceBuyboxInfo'] = $data['instanceBuyboxInfo'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offerId
     *
     * @return string|null
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     *
     * @param string|null $offerId Id of the offer the price is set for.
     *
     * @return self
     */
    public function setOfferId($offerId)
    {
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets marketCode
     *
     * @return string|null
     */
    public function getMarketCode()
    {
        return $this->container['marketCode'];
    }

    /**
     * Sets marketCode
     *
     * @param string|null $marketCode Code of the market the price is set for.
     *
     * @return self
     */
    public function setMarketCode($marketCode)
    {
        $this->container['marketCode'] = $marketCode;

        return $this;
    }

    /**
     * Gets marketName
     *
     * @return string|null
     */
    public function getMarketName()
    {
        return $this->container['marketName'];
    }

    /**
     * Sets marketName
     *
     * @param string|null $marketName Name of the market the price is set for.
     *
     * @return self
     */
    public function setMarketName($marketName)
    {
        $this->container['marketName'] = $marketName;

        return $this;
    }

    /**
     * Gets isSiteMarket
     *
     * @return bool|null
     */
    public function getIsSiteMarket()
    {
        return $this->container['isSiteMarket'];
    }

    /**
     * Sets isSiteMarket
     *
     * @param bool|null $isSiteMarket Indicates whether there exists a refurbed website for this market.
     *
     * @return self
     */
    public function setIsSiteMarket($isSiteMarket)
    {
        $this->container['isSiteMarket'] = $isSiteMarket;

        return $this;
    }

    /**
     * Gets isCalculated
     *
     * @return bool|null
     */
    public function getIsCalculated()
    {
        return $this->container['isCalculated'];
    }

    /**
     * Sets isCalculated
     *
     * @param bool|null $isCalculated Indicates whether the price was calculated by a rule or set manually by the merchant.
     *
     * @return self
     */
    public function setIsCalculated($isCalculated)
    {
        $this->container['isCalculated'] = $isCalculated;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return \WigandtTech\Refurbed\Model\CurrencyCode|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param \WigandtTech\Refurbed\Model\CurrencyCode|null $currencyCode currencyCode
     *
     * @return self
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price Gross price of this offer. Either set by merchant, or calculated by refurbed.
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets minPrice
     *
     * @return string|null
     */
    public function getMinPrice()
    {
        return $this->container['minPrice'];
    }

    /**
     * Sets minPrice
     *
     * @param string|null $minPrice Optional minimum price in market currency for automatic repricing. Either set by merchant, or calculated by refurbed.
     *
     * @return self
     */
    public function setMinPrice($minPrice)
    {
        $this->container['minPrice'] = $minPrice;

        return $this;
    }

    /**
     * Gets siteMarketCurrencyCode
     *
     * @return \WigandtTech\Refurbed\Model\CurrencyCode|null
     */
    public function getSiteMarketCurrencyCode()
    {
        return $this->container['siteMarketCurrencyCode'];
    }

    /**
     * Sets siteMarketCurrencyCode
     *
     * @param \WigandtTech\Refurbed\Model\CurrencyCode|null $siteMarketCurrencyCode siteMarketCurrencyCode
     *
     * @return self
     */
    public function setSiteMarketCurrencyCode($siteMarketCurrencyCode)
    {
        $this->container['siteMarketCurrencyCode'] = $siteMarketCurrencyCode;

        return $this;
    }

    /**
     * Gets siteMarketPrice
     *
     * @return string|null
     */
    public function getSiteMarketPrice()
    {
        return $this->container['siteMarketPrice'];
    }

    /**
     * Sets siteMarketPrice
     *
     * @param string|null $siteMarketPrice Price in currency of the site market. Only set for site markets.
     *
     * @return self
     */
    public function setSiteMarketPrice($siteMarketPrice)
    {
        $this->container['siteMarketPrice'] = $siteMarketPrice;

        return $this;
    }

    /**
     * Gets siteMarketMinPrice
     *
     * @return string|null
     */
    public function getSiteMarketMinPrice()
    {
        return $this->container['siteMarketMinPrice'];
    }

    /**
     * Sets siteMarketMinPrice
     *
     * @param string|null $siteMarketMinPrice Minimum price in currency of the site market. Only set for site markets.
     *
     * @return self
     */
    public function setSiteMarketMinPrice($siteMarketMinPrice)
    {
        $this->container['siteMarketMinPrice'] = $siteMarketMinPrice;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return \WigandtTech\Refurbed\Model\OfferVisibility|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param \WigandtTech\Refurbed\Model\OfferVisibility|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets instanceBuyboxState
     *
     * @return \WigandtTech\Refurbed\Model\OfferBuyboxState|null
     */
    public function getInstanceBuyboxState()
    {
        return $this->container['instanceBuyboxState'];
    }

    /**
     * Sets instanceBuyboxState
     *
     * @param \WigandtTech\Refurbed\Model\OfferBuyboxState|null $instanceBuyboxState instanceBuyboxState
     *
     * @return self
     */
    public function setInstanceBuyboxState($instanceBuyboxState)
    {
        $this->container['instanceBuyboxState'] = $instanceBuyboxState;

        return $this;
    }

    /**
     * Gets instanceBuyboxInfo
     *
     * @return \WigandtTech\Refurbed\Model\BuyboxInfo|null
     */
    public function getInstanceBuyboxInfo()
    {
        return $this->container['instanceBuyboxInfo'];
    }

    /**
     * Sets instanceBuyboxInfo
     *
     * @param \WigandtTech\Refurbed\Model\BuyboxInfo|null $instanceBuyboxInfo instanceBuyboxInfo
     *
     * @return self
     */
    public function setInstanceBuyboxInfo($instanceBuyboxInfo)
    {
        $this->container['instanceBuyboxInfo'] = $instanceBuyboxInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


