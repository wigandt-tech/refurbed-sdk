<?php
/**
 * BuyboxInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WigandtTech\Refurbed
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merchant API
 *
 * The refurbed merchant API allows to access and manage markets, currencies, instances, shipping profiles, offers, market offers, orders and order items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@refurbed.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WigandtTech\Refurbed\Model;

use \ArrayAccess;
use \WigandtTech\Refurbed\ObjectSerializer;

/**
 * BuyboxInfo Class Doc Comment
 *
 * @category Class
 * @package  WigandtTech\Refurbed
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BuyboxInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BuyboxInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'siteMarketCompetitorPrice' => 'string',
        'siteMarketSuggestedOfferPrice' => 'string',
        'siteMarketSuggestedOfferPriceDiff' => 'string',
        'suggestedOfferPrice' => 'string',
        'suggestedOfferPriceDiff' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'siteMarketCompetitorPrice' => null,
        'siteMarketSuggestedOfferPrice' => null,
        'siteMarketSuggestedOfferPriceDiff' => null,
        'suggestedOfferPrice' => null,
        'suggestedOfferPriceDiff' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'siteMarketCompetitorPrice' => 'site_market_competitor_price',
        'siteMarketSuggestedOfferPrice' => 'site_market_suggested_offer_price',
        'siteMarketSuggestedOfferPriceDiff' => 'site_market_suggested_offer_price_diff',
        'suggestedOfferPrice' => 'suggested_offer_price',
        'suggestedOfferPriceDiff' => 'suggested_offer_price_diff'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'siteMarketCompetitorPrice' => 'setSiteMarketCompetitorPrice',
        'siteMarketSuggestedOfferPrice' => 'setSiteMarketSuggestedOfferPrice',
        'siteMarketSuggestedOfferPriceDiff' => 'setSiteMarketSuggestedOfferPriceDiff',
        'suggestedOfferPrice' => 'setSuggestedOfferPrice',
        'suggestedOfferPriceDiff' => 'setSuggestedOfferPriceDiff'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'siteMarketCompetitorPrice' => 'getSiteMarketCompetitorPrice',
        'siteMarketSuggestedOfferPrice' => 'getSiteMarketSuggestedOfferPrice',
        'siteMarketSuggestedOfferPriceDiff' => 'getSiteMarketSuggestedOfferPriceDiff',
        'suggestedOfferPrice' => 'getSuggestedOfferPrice',
        'suggestedOfferPriceDiff' => 'getSuggestedOfferPriceDiff'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['siteMarketCompetitorPrice'] = $data['siteMarketCompetitorPrice'] ?? null;
        $this->container['siteMarketSuggestedOfferPrice'] = $data['siteMarketSuggestedOfferPrice'] ?? null;
        $this->container['siteMarketSuggestedOfferPriceDiff'] = $data['siteMarketSuggestedOfferPriceDiff'] ?? null;
        $this->container['suggestedOfferPrice'] = $data['suggestedOfferPrice'] ?? null;
        $this->container['suggestedOfferPriceDiff'] = $data['suggestedOfferPriceDiff'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets siteMarketCompetitorPrice
     *
     * @return string|null
     */
    public function getSiteMarketCompetitorPrice()
    {
        return $this->container['siteMarketCompetitorPrice'];
    }

    /**
     * Sets siteMarketCompetitorPrice
     *
     * @param string|null $siteMarketCompetitorPrice Total gross price of the competitor offer that currently has the BuyBox. This is the price shown to customers and includes shipping costs. In site market currency.
     *
     * @return self
     */
    public function setSiteMarketCompetitorPrice($siteMarketCompetitorPrice)
    {
        $this->container['siteMarketCompetitorPrice'] = $siteMarketCompetitorPrice;

        return $this;
    }

    /**
     * Gets siteMarketSuggestedOfferPrice
     *
     * @return string|null
     */
    public function getSiteMarketSuggestedOfferPrice()
    {
        return $this->container['siteMarketSuggestedOfferPrice'];
    }

    /**
     * Sets siteMarketSuggestedOfferPrice
     *
     * @param string|null $siteMarketSuggestedOfferPrice The suggested gross price (excl. shipping costs that might have been converted) for this offer that would make it get the BuyBox. In site market currency.  If you want to automatically underbid your competitors, set the offer minimum price and do not try to keep up by constantly pushing offer price updates yourself.
     *
     * @return self
     */
    public function setSiteMarketSuggestedOfferPrice($siteMarketSuggestedOfferPrice)
    {
        $this->container['siteMarketSuggestedOfferPrice'] = $siteMarketSuggestedOfferPrice;

        return $this;
    }

    /**
     * Gets siteMarketSuggestedOfferPriceDiff
     *
     * @return string|null
     */
    public function getSiteMarketSuggestedOfferPriceDiff()
    {
        return $this->container['siteMarketSuggestedOfferPriceDiff'];
    }

    /**
     * Sets siteMarketSuggestedOfferPriceDiff
     *
     * @param string|null $siteMarketSuggestedOfferPriceDiff Absolute difference between the current offer price (MIN(price, min price)) and the suggested offer price, in site market currency.
     *
     * @return self
     */
    public function setSiteMarketSuggestedOfferPriceDiff($siteMarketSuggestedOfferPriceDiff)
    {
        $this->container['siteMarketSuggestedOfferPriceDiff'] = $siteMarketSuggestedOfferPriceDiff;

        return $this;
    }

    /**
     * Gets suggestedOfferPrice
     *
     * @return string|null
     */
    public function getSuggestedOfferPrice()
    {
        return $this->container['suggestedOfferPrice'];
    }

    /**
     * Sets suggestedOfferPrice
     *
     * @param string|null $suggestedOfferPrice Same as site_market_suggested_offer_price but in offer price currency.
     *
     * @return self
     */
    public function setSuggestedOfferPrice($suggestedOfferPrice)
    {
        $this->container['suggestedOfferPrice'] = $suggestedOfferPrice;

        return $this;
    }

    /**
     * Gets suggestedOfferPriceDiff
     *
     * @return string|null
     */
    public function getSuggestedOfferPriceDiff()
    {
        return $this->container['suggestedOfferPriceDiff'];
    }

    /**
     * Sets suggestedOfferPriceDiff
     *
     * @param string|null $suggestedOfferPriceDiff Absolute difference between the current offer price (MIN(price, min price)) and the suggested offer price, in site market currency.
     *
     * @return self
     */
    public function setSuggestedOfferPriceDiff($suggestedOfferPriceDiff)
    {
        $this->container['suggestedOfferPriceDiff'] = $suggestedOfferPriceDiff;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


