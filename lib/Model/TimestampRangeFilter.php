<?php
/**
 * TimestampRangeFilter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WigandtTech\Refurbed
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merchant API
 *
 * The refurbed merchant API allows to access and manage markets, currencies, instances, shipping profiles, offers, market offers, orders and order items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@refurbed.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WigandtTech\Refurbed\Model;

use \ArrayAccess;
use \WigandtTech\Refurbed\ObjectSerializer;

/**
 * TimestampRangeFilter Class Doc Comment
 *
 * @category Class
 * @package  WigandtTech\Refurbed
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TimestampRangeFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimestampRangeFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gt' => '\DateTime',
        'ge' => '\DateTime',
        'anyOf' => '\DateTime[]',
        'noneOf' => '\DateTime[]',
        'le' => '\DateTime',
        'lt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gt' => 'date-time',
        'ge' => 'date-time',
        'anyOf' => 'date-time',
        'noneOf' => 'date-time',
        'le' => 'date-time',
        'lt' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gt' => 'gt',
        'ge' => 'ge',
        'anyOf' => 'any_of',
        'noneOf' => 'none_of',
        'le' => 'le',
        'lt' => 'lt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gt' => 'setGt',
        'ge' => 'setGe',
        'anyOf' => 'setAnyOf',
        'noneOf' => 'setNoneOf',
        'le' => 'setLe',
        'lt' => 'setLt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gt' => 'getGt',
        'ge' => 'getGe',
        'anyOf' => 'getAnyOf',
        'noneOf' => 'getNoneOf',
        'le' => 'getLe',
        'lt' => 'getLt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gt'] = $data['gt'] ?? null;
        $this->container['ge'] = $data['ge'] ?? null;
        $this->container['anyOf'] = $data['anyOf'] ?? null;
        $this->container['noneOf'] = $data['noneOf'] ?? null;
        $this->container['le'] = $data['le'] ?? null;
        $this->container['lt'] = $data['lt'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gt
     *
     * @return \DateTime|null
     */
    public function getGt()
    {
        return $this->container['gt'];
    }

    /**
     * Sets gt
     *
     * @param \DateTime|null $gt gt
     *
     * @return self
     */
    public function setGt($gt)
    {
        $this->container['gt'] = $gt;

        return $this;
    }

    /**
     * Gets ge
     *
     * @return \DateTime|null
     */
    public function getGe()
    {
        return $this->container['ge'];
    }

    /**
     * Sets ge
     *
     * @param \DateTime|null $ge ge
     *
     * @return self
     */
    public function setGe($ge)
    {
        $this->container['ge'] = $ge;

        return $this;
    }

    /**
     * Gets anyOf
     *
     * @return \DateTime[]|null
     */
    public function getAnyOf()
    {
        return $this->container['anyOf'];
    }

    /**
     * Sets anyOf
     *
     * @param \DateTime[]|null $anyOf anyOf
     *
     * @return self
     */
    public function setAnyOf($anyOf)
    {
        $this->container['anyOf'] = $anyOf;

        return $this;
    }

    /**
     * Gets noneOf
     *
     * @return \DateTime[]|null
     */
    public function getNoneOf()
    {
        return $this->container['noneOf'];
    }

    /**
     * Sets noneOf
     *
     * @param \DateTime[]|null $noneOf noneOf
     *
     * @return self
     */
    public function setNoneOf($noneOf)
    {
        $this->container['noneOf'] = $noneOf;

        return $this;
    }

    /**
     * Gets le
     *
     * @return \DateTime|null
     */
    public function getLe()
    {
        return $this->container['le'];
    }

    /**
     * Sets le
     *
     * @param \DateTime|null $le le
     *
     * @return self
     */
    public function setLe($le)
    {
        $this->container['le'] = $le;

        return $this;
    }

    /**
     * Gets lt
     *
     * @return \DateTime|null
     */
    public function getLt()
    {
        return $this->container['lt'];
    }

    /**
     * Sets lt
     *
     * @param \DateTime|null $lt lt
     *
     * @return self
     */
    public function setLt($lt)
    {
        $this->container['lt'] = $lt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


